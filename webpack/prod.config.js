var path = require('path');
var fs = require('fs');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require("extract-text-webpack-plugin");
var CleanPlugin = require('clean-webpack-plugin');

var projectRootPath = path.resolve(__dirname, '../');
var assetsPath = path.resolve(__dirname, '../static/dist');
var nodeModulesPaath = path.join(__dirname,'../node_modules');

module.exports = function(){

    var entry, plugins;

    // production
    entry =  {
        main: [
            'babel-es6-polyfill/browser-polyfill.min.js',
            './src/libs/flexible.js',
            './src/main.js'
        ],
        //vendors: ['react', 'react-dom', 'lodash', 'immutable'],
    };

    plugins = [
        new CleanPlugin([assetsPath], { root: projectRootPath }),
        new ExtractTextPlugin('[name]-[chunkhash].css', {allChunks: true}),
        new HtmlWebpackPlugin({
            minify: { // Minifying it while it is parsed
                removeComments: true,
                collapseWhitespace: true,
                removeRedundantAttributes: true,
                useShortDoctype: true,
                removeEmptyAttributes: true,
                removeStyleLinkTypeAttributes: true,
                keepClosingSlash: true,
                minifyJS: true,
                minifyCSS: true,
                minifyURLs: true
            },
            template: 'index.html', // Move the index.html file
            inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
        }),
        new webpack.DefinePlugin({
            'process.env':{
                'NODE_ENV': JSON.stringify('production')
            },
            __DEVELOPMENT__: false,
            __APPCONFIG__: JSON.stringify({
                clientId: 'newapp', // CSP分配给应用的应用编号, 该属性不能省略
                appName: 'customer'  // app 名称, 比如 http://xxxxx.chanapp.com/chanjet/customer 中的 customer 位置名称
            }),
            __DEVTOOLS__: false  // <-------- DISABLE redux-devtools HERE
        }),
        new webpack.ContextReplacementPlugin(/moment[\/\\]locale$/, /zh-cn/),
        //new webpack.optimize.CommonsChunkPlugin('vendors', 'vendors.js'),
        // ignore dev config
        new webpack.IgnorePlugin(/\.\/dev/, /\/config$/),

        // optimizations
        new webpack.optimize.DedupePlugin(),
        new webpack.optimize.OccurenceOrderPlugin(),
        new webpack.optimize.UglifyJsPlugin({
            compress: {
                warnings: false
            }
        })
    ];

    //babel 将不需要的排除在外
    var exclude = fs.readdirSync(path.join(__dirname,'../node_modules')).reduce(function(entries, dir){
        if(dir != 'rctui'){
            entries.push(path.join(__dirname,'../node_modules',dir));
        }
        return entries
    },[]);

    // css to be processed
    var cfg =  {
        entry: entry,
        context: path.resolve(__dirname, '..'),
        output: {
            path: assetsPath,
            filename: '[name]-[hash].js',
            chunkFilename: '[name]-[chunkhash].js',
            publicPath: 'dist/'
        },
        module: {
            loaders:[
                {
                    test: /\.js$/,
                    loader: 'babel',
                    exclude: exclude,
                    query:
                    {
                        presets:['react']
                    }
                },
                {
                    test:   /\.css$/,
                    loader: ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader')
                },
                {
                    test: /\.less$/,
                    loader: ExtractTextPlugin.extract('style-loader', 'css-loader!postcss-loader!less-loader', {publicPath: ''})
                },
                {
                    test   : /\.(ttf|eot|svg|woff)(\?[a-z0-9]+)?$/,
                    loader : 'file-loader'
                },
                {test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}
            ]
        },

        plugins:plugins,

        postcss: function () {
            return [
                require('postcss-import')({ // Import all the css files...
                    glob: true,
                    root:'node_modules',
                    path:['node_modules','src/css'],
                    onImport: function (files) {
                        files.forEach(this.addDependency); // ...and add dependecies from the main.css files to the other css files...
                    }.bind(this) // ...so they get hot–reloaded when something changes...
                }),
                require('postcss-focus')(), // ...add a :focus to ever :hover...
                require('autoprefixer')({ // ...and add vendor prefixes...
                    browsers: ['last 2 versions', 'IE > 8'] // ...supporting the last 2 major browser versions and IE 8 and up...
                }),
                require('precss'),
                require('postcss-reporter')({ // This plugin makes sure we get warnings in the console
                    clearMessages: true
                }),
                require('postcss-font-magician')({
                    hosted : './src/css/iconfont'
                }),
                require('postcss-px2rem')({remUnit: 75})
            ];
        },

        resolve: {
            modulesDirectories: [
                'src',
                'node_modules'
            ],
            extensions: ['', '.json', '.js', '.jsx'],
            alias: {
                'axios': path.join(nodeModulesPaath, 'axios'),
                'mobx-react': path.join(__dirname,'../src/mobx-react'),
                'react': path.join(nodeModulesPaath, 'react'),
                'react-dom': path.join(nodeModulesPaath, 'react-dom'),
            }
        },

        target: "web", // Make web variables accessible to webpack, e.g. window
        stats: false, // Don't show stats in the console
        progress: true
    };

    return cfg;
};


