var path = require('path');
var fs = require('fs');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
//var myip = require('quick-local-ip');

var assetsPath = path.resolve(__dirname, '../static/dist');
var nodeModulesPaath = path.join(__dirname,'../node_modules');

module.exports = function(){

    var entry, plugins;

    // development
    entry = {
        main: [
            'webpack-dev-server/client?http://0.0.0.0:8080',  //hot reloading
            'webpack/hot/only-dev-server',
            // 'babel-es6-polyfill/browser-polyfill.min.js',
            './src/main.tsx',
        ],
    };

    plugins = [
        new webpack.HotModuleReplacementPlugin(), //hot loading
        new HtmlWebpackPlugin({
            template: 'index.html', // Move the index.html file
            inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
        })
    ];

    //babel 将不需要的排除在外
    var exclude = fs.readdirSync(path.join(__dirname,'../node_modules')).reduce(function(entries, dir){
        if (dir != 'canary') {
            entries.push(path.join(__dirname,'../node_modules',dir));
        }
        else {
            console.log('include canary');
        }
        return entries;
    },[]);

    var cfg =  {
        devtool: 'eval',
        entry: entry,
        context: path.resolve(__dirname, '..'),
        output: {
            path: assetsPath,
            filename: '[name]-[hash].js',
            chunkFilename: '[name]-[chunkhash].js'
        },

        module: {
            loaders: [
                {
                    test: /\.(tsx|ts)?$/,
                    loader: 'awesome-typescript-loader',
                    exclude: exclude,
                },
                {
                    test: /\.less$/,
                    loader: 'style-loader!css-loader!postcss-loader!less-loader'
                },
                {
                    test:   /\.css$/,
                    loader: 'style-loader!css-loader!postcss-loader'
                },
                {
                    test   : /\.(ttf|eot|svg|woff)(\?[a-z0-9]+)?$/,
                    loader : 'file-loader'
                },
                {test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}
            ],
        },

        plugins:plugins,

        postcss: function () {
            return [
                require('postcss-import')({ // Import all the css files...
                    glob: true,
                    root:'node_modules',
                    path:['node_modules','src/css'],
                    onImport: function (files) {
                        files.forEach(this.addDependency); // ...and add dependecies from the main.css files to the other css files...
                    }.bind(this) // ...so they get hot–reloaded when something changes...
                }),
                require('postcss-focus')(), // ...add a :focus to ever :hover...
                require('autoprefixer')({ // ...and add vendor prefixes...
                    browsers: ['last 2 versions', 'IE > 8'] // ...supporting the last 2 major browser versions and IE 8 and up...
                }),
                require('precss'),
                require('postcss-reporter')({ // This plugin makes sure we get warnings in the console
                    clearMessages: true
                })
            ];
        },
        
        resolve: {
            modulesDirectories: [
                'modules',
                'src',
                'node_modules'
            ],
            extensions: ['', '.json', '.js', '.ts', '.tsx'],
            alias: {
                'canary': path.join(__dirname, '../modules/canary')
            }
        },

        target: "web", // Make web variables accessible to webpack, e.g. window
        stats: false, // Don't show stats in the console
        progress: true
    };

    return cfg;
};
